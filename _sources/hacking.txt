.. image:: ../artwork/toyplot.png
  :width: 200px
  :align: right
  :class: logo-important

Toyplot for Hackers
===================

.. important:: **The Toyplot Sources Aren't Available Yet**

  This is embarassing, but we're still waiting for our lawyer-gnomes to
  finalize the copyright on Toyplot's source code.  Toyplot will be released
  under a BSD-style license as soon as that happens, but in the meantime,
  the following instructions won't work ... apologies!

  Contact Timothy M. Shead <tshead@sandia.gov> if you have questions or
  would like to be notified when Toyplot is released.

Getting Started
---------------

First, if you haven't already, you'll need to install Toyplot from source,
including its hard dependencies:

* Python 2.7 - http://python.org
* numpy - http://numpy.org

And you're going to need the optional dependencies so you can run all the
regression tests:

* cairo, pango, pangocairo - typically installed using pygtk - http://www.pygtk.org

Lastly, you'll need to install the tools required for Toyplot's build, testing,
coverage, and documentation:

* setuptools - http://pythonhosted.org//setuptools
* nose - unit test framework - https://nose.readthedocs.org/en/latest/
* coverage - code coverage module - http://nedbatchelder.com/code/coverage/
* Sphinx - documentation builder - http://sphinx-doc.org
* Sphinx readthedocs theme - https://github.com/snide/sphinx_rtd_theme
* numpydocs - https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt
* IPython - http://ipython.org

Now, you're ready to "install" Toyplot - but as a convenience, you'll want to use
"develop mode".  Develop mode is a a feature provided by setuptools that links
the Toyplot source code to the install directory instead of copying it ... that way
you can edit the source code in your git sandbox, and you don't have to re-install
it to test your changes::

    $ git clone https://github.com/sandialabs/toyplot.git
    $ cd toyplot
    $ python setup.py develop

Code Walkthrough
----------------

Most of toyplot's public API is located in `toyplot/__init__.py`, for most
contributations, that's where you'll start.  If you're adding a new type of
visualization, you'll need to create a new :class:`toyplot.Mark` derivative
there.  Then, you'll create factory methods for creating instances of your
new mark in :class:`toyplot.Axes2D` and/or :class:`toyplot.Canvas`.  Once
you've done that, you'll need to write code for rendering your new mark
in `toyplot/svg.py`.  Then you're done ... all of the other backends render
based on the SVG representation.

Running Regression Tests
------------------------

To run the Toyplot test suite, simply run nose from the top-level Toyplot
source directory::

    $ cd toyplot
    $ nosetests

The tests will run, providing feedback on successes / failures.

Modifying Regression Tests
--------------------------

To add new tests or modify existing tests, edit `tests/tests.py`.

Many of the tests function by comparing the SVG representation of a
:class:`toyplot.Canvas` against a reference stored in `tests/reference`.  These
tests all end with a call to `assert_canvas_matches(canvas, "test-name")`,
which compares the canvas to the file `tests/reference/test-name.svg`.  The
first time to you run a new test that uses :func:`assert_canvas_matches`, it
will generate and store the new reference file, then fail, prompting you to
examine the reference file to ensure that it's correct.  The next time you run
the test, it will function normally, comparing the canvas against the reference
file.

If you make changes that cause an existing test to fail, the failed SVG will
be written to `tests/failed/test-name.svg`, so you can compare it against the
reference SVG in `tests/reference/test-name.svg`.

Test Coverage
-------------

When you run the test suite with nose, it also automatically generates code
coverage statistics.  To see the coverage results, open `toyplot/.cover/index.html`
in a web browser.

Building the Documentation
--------------------------

To build the documentation, run::

    $ cd toyplot
    $ python docs/setup.py

Note that the tutorial documentation is written as an IPython notebook, so the
docs/setup.py script requires IPython so it can convert the notebook into a
restructured text file for inclusion with the rest of the documentation.

Once the documentation is built, you can view it by opening `toyplot/docs/_build/html/index.html`
in a web browser.
